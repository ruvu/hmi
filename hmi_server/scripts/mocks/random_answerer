#!/usr/bin/env python
import random

import rospy
from hmi_server.abstract_server import AbstractHMIServer, HMIResult
from hmi_server.common import random_fold_options, fill_spec_with_results

wait_time = 5


class HMIServer(AbstractHMIServer):
    def _determine_answer(self, description, spec, choices, is_preempt_requested):

        rospy.loginfo('Waiting for %d seconds', wait_time)
        start = rospy.Time.now()
        while rospy.Time.now() - start < rospy.Duration(wait_time) \
            and not is_preempt_requested() \
            and not rospy.is_shutdown():
            rospy.sleep(0.1)

        # first resolve all options
        raw_result = random_fold_options(spec)
        print raw_result

        # choose random choices
        results = {}
        for choice, values in choices.items():
            if len(values):
                value = random.choice(values)
                results[choice] = value
            else:
                rospy.logwarn('No values for choice "%s" in spec "%s"', choice.id, spec)

        # Parse the groups in the ending result :)
        print results
        raw_result = fill_spec_with_results(raw_result, results)

        return HMIResult(raw_result=raw_result, results=results)


if __name__ == '__main__':
    rospy.init_node('random_answerer')
    HMIServer(rospy.get_name())
    rospy.spin()
